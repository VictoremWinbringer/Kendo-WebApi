<div id="grid"></div>
<div id="grid1">
    <h4>Users</h4>
    <div data-role="grid"
         data-selectable="row"
         data-editable="popup"
         data-toolbar="[{ name: 'create', text: 'Add' },{ name: 'update', text: 'Edit'}, { name: 'destroy', text: 'Delete' } ]"
         data-columns="[{ field: 'Id', width: 270 , title:'#' },
          {  'field': 'UserName', 'title': 'Username'   },
          {  'field': 'DepartmentId', 'title': 'Department', template: '${Department}'   }]"
         data-bind="source: users ,
         events:{
         change:changed
         }"
         style="height: 200px"></div>
</div>
<script src="~/Kendo/js/jquery.min.js"></script>
<script src="~/Kendo/js/kendo.all.min.js"></script>
<script>
    var User = kendo.data.Model.define({
        id: "Id",
        fields: {
            Id: { editable: false, type: "number" },
            UserName: { validation: { required: true } },
            DepartmentId: { editable: true, type: "number" },
            Department:{type:'string'}
        }
    });

    var Dpmt = kendo.data.Model.define({
        id: "Id",
        fields: {
            Id: { editable: false, type: "number" },
            Title: { editable: false }
        }
    });

    var remoteDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: "http://localhost:55918/api/users",
                dataType: "json"
            },
            create: {
                url: "http://localhost:55918/api/users",
                dataType: "json",
                type: "POST"
            },
            update: {
                url: function (options) {
                    console.log(options);
                    console.log(options.models);
                    console.log(options.model);
                    return "http://localhost:55918/api/users/" + options.Id;
                },
                dataType: "json",
                type: "PUT"
            },
            destroy: {
                url: function (options) {
                    return "http://localhost:55918/api/users/" + options.Id;
                },
                dataType: "json",
                type: "DELETE"
            }
        },
        schema: {
            model: User
        }
    });


    var remoteDataSource1 = new kendo.data.DataSource({
        transport: {
            read: {
                url: "http://localhost:55918/api/departments",
                dataType: "json"
            }
        },
        schema: {
            model: Dpmt
        }
    });


    var viewModel = kendo.observable({
        isVisible: true,
        users: remoteDataSource,
        departments: remoteDataSource1,
        changed: function (arg) {
            var selected = $.map(arg.sender.select(), function (item) {
                return $(item).text();
            });
            console.log(selected[0]);
        }
    });

    kendo.bind($("#grid1"), viewModel);

    $('#grid').kendoGrid({
        dataSource: remoteDataSource,
        height: 500,
        toolbar: [{ name: "create", text: "Add" }],
        editable: "popup",
        change: function (arg) {
            console.log(arg);
            console.log(this.select()[0]);
            //var selected = $.map(this.select(), function (item) {
            //    return $(item).text();
            //});
            //console.log("Selected: " + selected.length + " item(s), [" + selected.join(", ") + "]");
        },
        selectable: "row",
        columns: [
                {
                    field: "Id",
                    title: "#"
                },
                {
                    field: "UserName",
                    title: "Username"
                },
                 {
                     field: "DepartmentId",
                     title: "Department",
                     editor: function (container, options) {
                         var input = $("<input/>");
                         input.attr("name", options.field);
                         input.appendTo(container);
                         input.kendoDropDownList({
                             dataTextField: "Title",
                             dataValueField: "Id",
                             dataSource: remoteDataSource1
                         });
                     }
                 },
                  {
                      field: "Department",
                      title: "Department"
                  },
                {
                    command: ["edit", "destroy"]
                }
        ]
    });
</script>
